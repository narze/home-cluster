argo-cd:
  dex:
    enabled: false

  configs:
    repositories:
      - type: git
        name: home-cluster
        url: https://github.com/narze/home-cluster.git
      - type: helm
        name: argo-cd
        url: https://argoproj.github.io/argo-helm
      - type: helm
        name: bitnami
        url: https://charts.bitnami.com/bitnami
      - type: helm
        name: jetstack
        url: https://charts.jetstack.io

  server:
    extraArgs:
      - --insecure
    config:
      kustomize.buildOptions: "--enable-alpha-plugins"

      # DEPRECATED: Please instead use configs.credentialTemplates and configs.repositories
      # repositories: |
      #   - type: git
      #     name: home-cluster
      #     url: https://github.com/narze/home-cluster.git
      #   - type: helm
      #     name: argo-cd
      #     url: https://argoproj.github.io/argo-helm

      # helm-secrets (1/2)
      helm.valuesFileSchemes: >-
        secrets+gpg-import, secrets+gpg-import-kubernetes,
        secrets+age-import, secrets+age-import-kubernetes,
        secrets,
        https

    additionalApplications:
      # Self-managed ArgoCD
      - name: argo-cd
        namespace: argocd
        destination:
          namespace: argocd
          server: https://kubernetes.default.svc
        project: argocd
        source:
          path: charts/argo-cd
          # This repo
          repoURL: https://github.com/narze/home-cluster.git
          targetRevision: HEAD
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
        #   syncOptions:
        #   - CreateNamespace=true

      # Root app of apps `/apps`
      - name: root
        namespace: argocd
        destination:
          namespace: argocd
          server: https://kubernetes.default.svc
        project: default
        source:
          path: apps
          repoURL: https://github.com/narze/home-cluster.git
          targetRevision: HEAD
        syncPolicy:
          automated:
            selfHeal: true
            prune: true

      # Root app of infra `/infra`
      - name: infra
        namespace: argocd
        destination:
          namespace: infra
          server: https://kubernetes.default.svc
        project: infra
        source:
          path: infra
          repoURL: https://github.com/narze/home-cluster.git
          targetRevision: HEAD
          helm:
            valueFiles:
              # Method 1: Mount the gpg/age key from a kubernetes secret as volume
              # secrets+gpg-import://<key-volume-mount>/<key-name>.asc?<relative/path/to/the/encrypted/secrets.yaml>
              # secrets+age-import://<key-volume-mount>/<key-name>.txt?<relative/path/to/the/encrypted/secrets.yaml>
              # Example Method 1: (Assumptions: key-volume-mount=/helm-secrets-private-keys, key-name=key, secrets.yaml is in the templates folder)
              - secrets+age-import:///helm-secrets-private-keys/key.txt?secret-values.enc.yaml
        syncPolicy:
          automated:
            selfHeal: true
            prune: true
          syncOptions:
            - CreateNamespace=true

    additionalProjects:
      - name: argocd
        namespace: argocd
        additionalLabels: {}
        additionalAnnotations: {}
        description: ArgoCD Project
        sourceRepos:
          - "*"
        destinations:
          - namespace: argocd
            server: https://kubernetes.default.svc
        clusterResourceWhitelist:
          - group: "*"
            kind: "*"
        orphanedResources:
          warn: false

      - name: infra
        namespace: argocd
        additionalLabels: {}
        additionalAnnotations: {}
        description: Infrastructure Project
        sourceRepos:
          - "*"
        destinations:
          - namespace: argocd
            server: https://kubernetes.default.svc
          - namespace: infra
            server: https://kubernetes.default.svc
          - namespace: kube-system
            server: https://kubernetes.default.svc
          - namespace: cert-manager
            server: https://kubernetes.default.svc
        clusterResourceWhitelist:
          - group: "*"
            kind: "*"
        orphanedResources:
          warn: false

    # Ingress: argocd.home-cluster.narze.live
    ingress:
      # -- Enable an ingress resource for the Argo CD server
      enabled: true
      # -- Additional ingress annotations
      annotations: {}
      # -- Additional ingress labels
      labels: {}
      # -- Defines which ingress controller will implement the resource
      ingressClassName: ""

      # -- List of ingress hosts
      ## Argo Ingress.
      ## Hostnames must be provided if Ingress is enabled.
      ## Secrets must be manually created in the namespace
      hosts:
        - argocd.homelab.narze.live

      # -- List of ingress paths
      paths:
        - /
      # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
      pathType: Prefix
      # -- Additional ingress paths
      extraPaths:
        []
        # - path: /*
        #   backend:
        #     serviceName: ssl-redirect
        #     servicePort: use-annotation
        ## for Kubernetes >=1.19 (when "networking.k8s.io/v1" is used)
        # - path: /*
        #   pathType: Prefix
        #   backend:
        #     service:
        #       name: ssl-redirect
        #       port:
        #         name: use-annotation

      # -- Ingress TLS configuration
      tls:
        []
        # - secretName: argocd-tls-certificate
        #   hosts:
        #     - argocd.example.com

      # -- Uses `server.service.servicePortHttps` instead `server.service.servicePortHttp`
      https: false

  # Replace ApplicationSet image with arm64 built one until official one is ready
  # Ref. https://github.com/argoproj/argo-cd/issues/8394
  applicationSet:
    image:
      # -- Repository to use for the application set controller
      repository: ghcr.io/jr64/argocd-applicationset
      # -- Image pull policy for the application set controller
      pullPolicy: IfNotPresent
      # -- Tag to use for the application set controller
      tag: "v0.4.0"

  # helm-secrets (2/2) & ksops - start
  repoServer:
    # Mount the secrets to the ArgoCD repo server
    volumes:
      - name: helm-secrets-private-keys
        secret:
          secretName: helm-secrets-private-keys
      - name: custom-tools
        emptyDir: {}
    volumeMounts:
      - mountPath: /helm-secrets-private-keys/
        name: helm-secrets-private-keys
      - mountPath: /custom-tools
        name: custom-tools

      # ksops: Mount ksops to kustomize plugin
      - mountPath: /usr/local/bin/kustomize
        name: custom-tools
        subPath: kustomize
        # Verify this matches a XDG_CONFIG_HOME=/.config env variable
      - mountPath: /.config/kustomize/plugin/viaduct.ai/v1/ksops/ksops
        name: custom-tools
        subPath: ksops

    env:
      # ksops: Set the XDG_CONFIG_HOME env variable to allow kustomize to detect the plugin
      - name: XDG_CONFIG_HOME
        value: /.config
      # ksops: Points SOPS_AGE_KEY_FILE to key.txt for decryption with ksops
      - name: SOPS_AGE_KEY_FILE
        value: /helm-secrets-private-keys/key.txt

      - name: HELM_PLUGINS
        value: /custom-tools/helm-plugins/
      # In case wrapper scripts are used, HELM_SECRETS_HELM_PATH needs to be the path of the real helm binary
      - name: HELM_SECRETS_HELM_PATH
        value: /usr/local/bin/helm
      - name: HELM_SECRETS_SOPS_PATH
        value: /custom-tools/sops
      - name: HELM_SECRETS_KUBECTL_PATH
        value: /custom-tools/kubectl
      # https://github.com/jkroepke/helm-secrets/wiki/Security-in-shared-environments
      - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
        value: "false"
      - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
        value: "false"
      - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
        value: "false"
    # volumes:
    #   - name: custom-tools
    #     emptyDir: {}
    # volumeMounts:
    #   - mountPath: /custom-tools
    #     name: custom-tools

    initContainers:
      - name: download-tools
        image: alpine:latest
        command: [sh, -ec]
        env:
          - name: HELM_SECRETS_VERSION
            value: "3.12.0"
          - name: SOPS_VERSION
            value: "3.7.2"
          - name: SOPS_ARCH
            value: "linux.arm64"
          - name: KUBECTL_VERSION
            value: "1.22.4"
          - name: KUBECTL_ARCH
            value: "linux/arm64"
        args:
          - |
            mkdir -p /custom-tools/helm-plugins
            wget -qO- https://github.com/jkroepke/helm-secrets/releases/download/v${HELM_SECRETS_VERSION}/helm-secrets.tar.gz | tar -C /custom-tools/helm-plugins -xzf-;

            wget -qO /custom-tools/sops https://github.com/mozilla/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.${SOPS_ARCH}
            wget -qO /custom-tools/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/${KUBECTL_ARCH}/kubectl

            chmod +x /custom-tools/*
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools

      # ksops: Install KSOPS
      - name: install-ksops
        image: viaductoss/ksops:v3.0.2-arm64
        command: ["/bin/sh", "-c"]
        args:
          - echo "Installing KSOPS...";
            mv ksops /custom-tools/;
            mv $GOPATH/bin/kustomize /custom-tools/;
            echo "Done.";
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools
  # helm-secrets (2/2) & ksops - end
